
Source files that have been modified:

--ExternalSort.java
--PlanBuilder.java


Overview of the algorithm used to implement External Sort:

To implement External Sort, I have augmented the ExternalSort.java file with the following instance variable :


/** number of pages in the input operator **/
    private int numOfPages;(When we call the constructer of this java file, this instance variable is set to 0 )

Method:
LinkedList<RelationIOManager> generateIniRuns(RelationIOManager Man,Relation Rel)
--this method reads the input file in batches of B pages, sorts them in main memory and generates the initial runs



Outline of the method:
1)Initialise a LinkedList of RelationsIOManagers and  call it 'runs_1' and assign a local counter(the scope of this counter is with in the method) 
2)Retrieve the page iterator from the input RelationIOMaanager Man and empty the contents of returnList( this is a list of tuples)
3) While the iterator has pages:
	get the next page of the iterator
	add the tuples of this page to returnList
	increment counter and numOfPages;
	if (counter==buffersize || the current page is the last page of the page iterator of Man)
		sort returnList
		create a new RelationIOManager  and add the tuples in returnList to this manager
		Add this new RelationIOManager to runs_1
		empty returnList and set counter to 0
4) Return runs_1


Method : RelationIOManager perform_externalSort(LinkedList<RelationIOManager> runs_1,int numOfPasses, Relation rel) 
--Until all X/B  temporary files are exhausted, this method iteratively reads B-1 temporary files,  merges them and writes the output to disk. This procedure is repeated until there exists only one big sorted output file


Outline of the method:
The input of this method are:
 /*number of remaining passes*/
numOfPasses: (int)Math.ceil(Math.log(runs_1.size() )/Math.log(buffers-1));
runs_1: The intial runs generated by the method discussed earlier
rel: the relation of the operator

Outline of the method:
For i=1 to NumOfPasses (--this is loop 1 <-this iterates at each pass):
		Initialise a local counter 'c' --this counter keeps track of how many temporary files have been exhausted at each pass
		Initialise  LinkedList of RelationIOManager : intermediateList--this stores the outfiles that have generated at the current pass
		while c< runs_1.size()(--this is loop2 ):
			initialise the variable 'arraySize' to B-1 (B<- buffersize) if (runs_1.size()-c) >B else set arraySize to runs_1.size()-c
			Create the following 5 arrays using the variable 'arraySize' to define their size:
				Array1 <- Array of RelationIOManagers 
				--At each iteration of this while loop, array1 is filled the RelationIOManagers occupying from the cth to c+arraySize index of runs_1
				Array2<- Array of Page Iterators
				- the ith index  represents the ith page iterator of the ith RelationIOManager in Array 1
				Array3<- Array of Pages
				-- the ith index  represents the ith page  of the ith Page iterator in Array 2
				Array4<- Array of Tuple Iterators
				--- the ith index  represents the ith Tuple Iterator  of the ith Page in Array 3
				Array5<-Array Of Tuples
				---- the ith index  represents the ith tuple  of the ith Tuple iterator in Array 4

	






